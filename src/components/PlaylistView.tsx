import React, { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { ArrowLeft, Music, Play, RefreshCw, Share2, Download, Heart, ExternalLink } from 'lucide-react';
import { AnalysisResult } from '../types';
import toast from 'react-hot-toast';

interface PlaylistViewProps {
  result: AnalysisResult;
  onBack: () => void;
  onStartOver: () => void;
}

const PlaylistView: React.FC<PlaylistViewProps> = ({ result, onBack, onStartOver }) => {
  const [likedSongs, setLikedSongs] = useState<Set<number>>(new Set());
  const [currentPlaying, setCurrentPlaying] = useState<number | null>(null);

  const toggleLike = (index: number) => {
    const newLiked = new Set(likedSongs);
    if (newLiked.has(index)) {
      newLiked.delete(index);
      toast.success('Removed from favorites');
    } else {
      newLiked.add(index);
      toast.success('Added to favorites');
    }
    setLikedSongs(newLiked);
  };

  const handleShare = async () => {
    try {
      const playlistText = `ðŸŽ§ My Vibe Playlist - ${result.moodCategory}\n\n${result.vibe}\n\n${result.playlist.map((song, i) => `${i + 1}. ${song.title} - ${song.artist}`).join('\n')}\n\nGenerated by Feeling the Vibe AI`;
      
      if (navigator.share) {
        await navigator.share({
          title: 'My Vibe Playlist',
          text: playlistText,
        });
      } else {
        await navigator.clipboard.writeText(playlistText);
        toast.success('Playlist copied to clipboard!');
      }
    } catch (error) {
      toast.error('Failed to share playlist');
    }
  };

  const handleExportPlaylist = () => {
    const playlistData = {
      vibe: result.vibe,
      moodCategory: result.moodCategory,
      playlist: result.playlist,
      generatedAt: new Date().toISOString()
    };
    
    const blob = new Blob([JSON.stringify(playlistData, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `vibe-playlist-${result.moodCategory}.json`;
    a.click();
    URL.revokeObjectURL(url);
    toast.success('Playlist exported!');
  };

  const searchSpotify = (song: string, artist: string) => {
    const query = encodeURIComponent(`${song} ${artist}`);
    window.open(`https://open.spotify.com/search/${query}`, '_blank');
  };

  return (
    <div className="max-w-4xl mx-auto">
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        className="bg-white/10 backdrop-blur-lg rounded-2xl border border-white/20 overflow-hidden"
      >
        {/* Header */}
        <div className="bg-gradient-to-r from-purple-600/20 to-pink-600/20 p-6 border-b border-white/10">
          <div className="flex items-center justify-between mb-4">
            <motion.button
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              onClick={onBack}
              className="flex items-center space-x-2 text-gray-300 hover:text-white transition-colors"
            >
              <ArrowLeft className="w-5 h-5" />
              <span>Back to Analysis</span>
            </motion.button>

            <div className="flex space-x-2">
              <motion.button
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                onClick={handleShare}
                className="p-2 bg-white/10 rounded-lg hover:bg-white/20 transition-colors"
              >
                <Share2 className="w-5 h-5 text-gray-300" />
              </motion.button>
              
              <motion.button
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                onClick={handleExportPlaylist}
                className="p-2 bg-white/10 rounded-lg hover:bg-white/20 transition-colors"
              >
                <Download className="w-5 h-5 text-gray-300" />
              </motion.button>
            </div>
          </div>

          <div className="text-center">
            <h2 className="text-3xl font-bold text-white mb-2">Your Vibe Playlist</h2>
            <p className="text-lg text-purple-300 capitalize font-semibold">{result.moodCategory}</p>
            <p className="text-gray-300 mt-3 max-w-2xl mx-auto">{result.vibe}</p>
          </div>

          <div className="flex justify-center mt-6">
            <div className="flex items-center space-x-6 text-sm text-gray-400">
              <span>{result.playlist.length} songs</span>
              <span>â€¢</span>
              <span>AI curated</span>
              <span>â€¢</span>
              <span>Personalized for you</span>
            </div>
          </div>
        </div>

        {/* Playlist */}
        <div className="p-6">
          <div className="space-y-3">
            <AnimatePresence>
              {result.playlist.map((song, index) => (
                <motion.div
                  key={index}
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: index * 0.1 }}
                  className={`group relative bg-white/5 hover:bg-white/10 rounded-xl p-4 border border-white/10 hover:border-purple-500/30 transition-all cursor-pointer ${
                    currentPlaying === index ? 'bg-purple-500/20 border-purple-500/50' : ''
                  }`}
                  onClick={() => setCurrentPlaying(currentPlaying === index ? null : index)}
                >
                  <div className="flex items-center space-x-4">
                    <div className="flex-shrink-0">
                      <div className="w-12 h-12 bg-gradient-to-r from-purple-500 to-pink-500 rounded-lg flex items-center justify-center">
                        {currentPlaying === index ? (
                          <motion.div
                            animate={{ scale: [1, 1.2, 1] }}
                            transition={{ repeat: Infinity, duration: 1 }}
                          >
                            <Music className="w-5 h-5 text-white" />
                          </motion.div>
                        ) : (
                          <span className="text-white font-bold">{index + 1}</span>
                        )}
                      </div>
                    </div>

                    <div className="flex-1 min-w-0">
                      <h4 className="font-semibold text-white group-hover:text-purple-300 transition-colors">
                        {song.title}
                      </h4>
                      <p className="text-gray-400 text-sm">{song.artist}</p>
                      <p className="text-gray-500 text-xs mt-1 line-clamp-2">{song.reason}</p>
                    </div>

                    <div className="flex items-center space-x-2 opacity-0 group-hover:opacity-100 transition-opacity">
                      <motion.button
                        whileHover={{ scale: 1.1 }}
                        whileTap={{ scale: 0.9 }}
                        onClick={(e) => {
                          e.stopPropagation();
                          toggleLike(index);
                        }}
                        className={`p-2 rounded-lg transition-colors ${
                          likedSongs.has(index)
                            ? 'bg-red-500/20 text-red-400'
                            : 'bg-white/10 text-gray-400 hover:text-red-400'
                        }`}
                      >
                        <Heart className={`w-4 h-4 ${likedSongs.has(index) ? 'fill-current' : ''}`} />
                      </motion.button>

                      <motion.button
                        whileHover={{ scale: 1.1 }}
                        whileTap={{ scale: 0.9 }}
                        onClick={(e) => {
                          e.stopPropagation();
                          searchSpotify(song.title, song.artist);
                        }}
                        className="p-2 bg-green-500/20 text-green-400 rounded-lg hover:bg-green-500/30 transition-colors"
                      >
                        <ExternalLink className="w-4 h-4" />
                      </motion.button>
                    </div>
                  </div>

                  <AnimatePresence>
                    {currentPlaying === index && (
                      <motion.div
                        initial={{ opacity: 0, height: 0 }}
                        animate={{ opacity: 1, height: 'auto' }}
                        exit={{ opacity: 0, height: 0 }}
                        className="mt-4 pt-4 border-t border-white/10"
                      >
                        <div className="bg-gradient-to-r from-purple-500/10 to-pink-500/10 rounded-lg p-4">
                          <h5 className="text-sm font-semibold text-purple-300 mb-2">Why this song matches your vibe:</h5>
                          <p className="text-sm text-gray-300">{song.reason}</p>
                        </div>
                      </motion.div>
                    )}
                  </AnimatePresence>
                </motion.div>
              ))}
            </AnimatePresence>
          </div>

          <div className="mt-8 text-center">
            <motion.button
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              onClick={onStartOver}
              className="inline-flex items-center space-x-2 px-6 py-3 bg-gradient-to-r from-purple-600 to-pink-600 text-white font-semibold rounded-xl shadow-lg hover:shadow-purple-500/25 transition-all"
            >
              <RefreshCw className="w-5 h-5" />
              <span>Analyze Another Mood</span>
            </motion.button>
          </div>
        </div>
      </motion.div>
    </div>
  );
};

export default PlaylistView;